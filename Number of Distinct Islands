//https://practice.geeksforgeeks.org/problems/number-of-distinct-islands/1
class Solution {
  public:
  
  bool isValid(int i, int j, vector<vector<int>>& g)
  {
      if(i < 0 || j < 0 || i >= g.size() || j >= g[0].size() || g[i][j] == 0)return false;
      return true;
  }
  void DFS(stack<string>&t, int i, int j, vector<vector<int>>&grid)
  {
      grid[i][j] = 0;
      
      if(isValid(i + 1, j, grid))
      {
          t.push("down");
          
          DFS(t, i + 1, j, grid);
          
      }
       if(isValid(i - 1, j, grid))
      {
          t.push("up");
          
          DFS(t, i - 1, j, grid);
          
      }
       if(isValid(i , j + 1, grid))
      {
          t.push("right");
          
          DFS(t, i, j + 1, grid);
          
      }
       if(isValid(i , j - 1, grid))
      {
          t.push("left");
          
          DFS(t, i, j - 1, grid);
          
      }
      
  }
    int countDistinctIslands(vector<vector<int>>& grid) {
        set<stack<string>>st;
        int n = grid.size(), m = grid[0].size(), ans = 0;
        
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] == 1)
                {
                    stack<string>temp;
                    DFS(temp, i, j, grid);
                    if(st.find(temp) == st.end())
                    {
                        ans++;
                        st.insert(temp);
                    }
                    
                }
            }
        }
        return ans;
    }
};
